{
  "metadata": {
    "kernelspec": {
      "name": "node_nteract",
      "language": "javascript",
      "display_name": "Node.js (nteract)"
    },
    "kernel_info": {
      "name": "node_nteract"
    },
    "language_info": {
      "name": "javascript",
      "version": "8.2.1",
      "mimetype": "application/javascript",
      "file_extension": ".js"
    },
    "title": "WepSIM ",
    "nteract": {
      "version": "nteract-on-jupyter@2.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0,
  "cells": [
    {
      "cell_type": "markdown",
      "source": "## mode",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "ep",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "mode",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## firmware",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "\nlui R u32 {\n    co=010110,\n    nwords=2,\n    R=reg(25,21),\n    u32=inm(63, 32),\n    {\n        # Mar <- PC\n        (T2, C0),\n        # MBR <- MP(MAR), PC <- PC + 4\n        (M1, C1, TA, BW=11, R, M2, C2), \n        # R <- MBR, salto a fetch\n\t\t\t  (T1, LC, SelC = 10101, MR=0, A0=1, B=1, C=0)\n    }\n}\n\nsw R1, (R2) {\n    co=010000,\n    nwords=1,\n    R1=reg(25,21),\n    R2=reg(20,16),\n    {\n        #MBR<-R1\n        (SelA=10101, MR=0, T9, C1, M1=0),\n        #MAR<-R2\n        (T9, SelA=10000,MR=0, C0),\n        # MP <- MBR, salto a fetch\n  \t(TD, W, TA, BW=11, A0=1, B=1, C=0)\n    }\n}\n\nlw R1, (R2) {\n    co=010011,\n    nwords=1,\n    R1=reg(25,21),\n    R2=reg(20,16),\n    {\n        #MAR<-R2\n  \t\t\t(T9, SelA=10000,MR=0, C0),\n        # MBR <- MP(MAR),\n        (M1, C1, TA, BW=11, R), \n        # R1 <- MBR\n        (T1, LC, SelC = 10101, MR=0, A0=1, B=1, C=0)\n    }\n}\n\nadd R1, R2, R3 {\n    co=011000,\n    nwords=1,\n    R1=reg(25,21),\n    R2=reg(20,16),\n    R3=reg(15, 11),\n    {\n      \t# R1 <- R3 + R2\n        (SelA=01011, SelB=10000, SelC=10101, MR=0, SelCop=1010, MC, T6, SelP=11, C7, M7, LC, A0, B, C=0)\n    }\n}\n\nmul_add R1, R2, R3, R4 {\n    co=011001,\n    nwords=1,\n    R1=reg(25,21),\n    R2=reg(20,16),\n    R3=reg(15, 11),\n    R4=reg(10, 6),\n    {\n      \t# RT2<- R2*R3\n        (SelA=10000, SelB=01011, MR=0, SelCop=1100, MC, T6, C5),\n        # R1 <- RT2 + R4\n\t(SelA=00110, MB=01, SelCop=1010, MC, T6, LC, SelC=10101, M7, C7, SelP=11, A0, B, C=0)\n    }\n}\n\nbeq R1, R2, S10 {\n    co=110100,\n    nwords=1,\n    R1=reg(25,21),\n    R2=reg(20,16),\n    S10=address(9,0)rel,\n    {\n        # RT2 <- SR, SR actualiza (R1 - R2)\n        (T8, C5, SelA=10101, SelB=10000, MR=0, MA=0, MB=00, SelCop=1011, MC, SelP=11, M7, C7),\n        # SR <- RT2, R1 - R2 != 0 => salto a fetch\n        (T5, C7, C=0110, B=1, A0=0, MADDR=fetch),\n        # RT1 <- S10\n\t      (SE, Size=01010, C4, T3),\n        # RT2 <- PC\n        (T2, C5),\n        # PC <- RT2 + RT1\n\t\t\t\t(MA, MB=01, SelCop=1010, MC, T6, C2, M2=0, A0, B, C=0),\n    }\n}\n\njal U16 {\n    co=100001,\n    nwords=1,\n    U16=address(15,0)abs,\n    {\n        # BR(RA) <- PC\n        (T2, LC, SelC=00001, MR),\n        # PC <- U16\n        (SE=0, Size=10000, Offset=0, T3, C2, M2=0, A0, B, C=0)\n    }\n}\n\njr_ra {\n    co=100010,\n    nwords=1,\n    {\n        (SelA=00001, MR, T9, C2, M2=0, A0, B, C=0),\n    }\n}\n\nhalt {\n    co=100011,\n    nwords=1,\n    {\n\t\t(EXCODE=0, T11, M2=0, C2, M7=0, C7, A0, B, C=0),\n    }\n}\n\nxchb (R1), (R2) {\n    co=011010,\n    nwords=1,\n    R1=reg(25, 21),\n    R2=reg(20,16),\n    {\n        # MAR <- R1\n        (C0, T9, SelA=10101, MR=0),\n        # MBR <- MP(R1), MAR <- R2\n        (R, TA, BW=00, M1, C1, SelA=10000, MR=0, T9, C0),\n        # RT1 <- MBR, MBR <- MP(R2)\n  \t\t\t(T1,TA,  C4, R, BW=00, C1, M1)\n  \t\t\t# MAR <- R1\n        (C0, T9, SelA=10101, MR=0),\n        # MP(R1) <- MBR (== MP(R2)), MBR <- RT1 (== MP(R1))\n\t\t\t\t(TA, W, BW=00, TD, T4, C1, M1=0),\n        # MAR <- R2\n        (SelA=10000, MR=0, T9, C0),\n        # MP(R2) <- MBR(==MP(R1 previo)) + salto a fetch\n        (TA, W, BW=00, TD, A0, B, C=0)\n    }\n}\n\n\n\n\n",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "firmware",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## assembly",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "assembly",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_current",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "{\n  \"time\": 1670174323379,\n  \"title\": \"clock 1 @ &#181;address 0\",\n  \"title_short\": \"clock 1,<br>&#181;add 0\",\n  \"content\": \"register R2 = 0x100000; register PC = 0x8000; memory 0x1018 = 0x1000100; memory 0x101c = 0x1010100; memory 0x1020 = 0x1010100; memory 0x1024 = 0x1010100; memory 0x1028 = 0x1000100; memory 0x1030 = 0x1000100; memory 0x1034 = 0x1000100; memory 0x1038 = 0x1000100; memory 0x103c = 0x1000100; memory 0x1040 = 0x1000100; memory 0x1048 = 0x1010100; memory 0x104c = 0x1010100; memory 0x1050 = 0x1010100; memory 0x1054 = 0x1010100; memory 0x1058 = 0x1010100; memory 0x1060 = 0x1000100; memory 0x1064 = 0x1000100; memory 0x1068 = 0x100; memory 0x106c = 0x100; memory 0x1070 = 0x1000000; memory 0x1078 = 0x1000100; memory 0x107c = 0x1000100; memory 0x1080 = 0x100; memory 0x1084 = 0x100; memory 0x1088 = 0x1010100; memory 0x10c0 = 0x1000100; memory 0x10c4 = 0x1010100; memory 0x10c8 = 0x1010100; memory 0x10cc = 0x1010100; memory 0x10d8 = 0x1000100; memory 0x10dc = 0x100; memory 0x10e0 = 0x1000100; memory 0x10e4 = 0x1000100; memory 0x10f0 = 0x1010100; memory 0x10f4 = 0x1010100; memory 0x10f8 = 0x1010100; memory 0x10fc = 0x1000100; memory 0x1108 = 0x1000000; memory 0x110c = 0x100; memory 0x1110 = 0x1000100; memory 0x1114 = 0x10100; memory 0x1120 = 0x1010100; memory 0x1124 = 0x1010100; memory 0x1128 = 0x1000100; memory 0x112c = 0x1000100; memory 0x1168 = 0x1010100; memory 0x116c = 0x1010100; memory 0x1170 = 0x1010100; memory 0x1174 = 0x1010100; memory 0x1178 = 0x10000; memory 0x1180 = 0x1000000; memory 0x1184 = 0x1000100; memory 0x1188 = 0x1000000; memory 0x118c = 0x1000000; memory 0x1190 = 0x10000; memory 0x1198 = 0x1010100; memory 0x119c = 0x1000100; memory 0x11a0 = 0x1010100; memory 0x11a4 = 0x1010100; memory 0x11a8 = 0x10000; memory 0x11b0 = 0x100; memory 0x11b4 = 0x1000100; memory 0x11b8 = 0x100; memory 0x11bc = 0x100; memory 0x11c8 = 0x1010100; memory 0x11cc = 0x1010100; memory 0x11d0 = 0x1010100; memory 0x11d4 = 0x1010100; memory 0x11d8 = 0x10000; memory 0x8000 = 0x59400000; memory 0x8004 = 0x1000; memory 0x8008 = 0x84008028; memory 0x800c = 0x5bc00000; memory 0x8010 = 0x1000; memory 0x8014 = 0x7c03108; memory 0x8018 = 0x5bc00000; memory 0x801c = 0x20; memory 0x8020 = 0x7c03104; memory 0x8024 = 0x8c000000; memory 0x8028 = 0x58a00000; memory 0x8030 = 0x60c05000; memory 0x8034 = 0x5b800000; memory 0x8038 = 0x1; memory 0x803c = 0x5be00000; memory 0x8040 = 0x18; memory 0x8044 = 0xd0bf0030; memory 0x8048 = 0x60fc2800; memory 0x804c = 0x67a5f980; memory 0x8050 = 0x63bd2800; memory 0x8054 = 0x63c0e800; memory 0x8058 = 0xd0ff0014; memory 0x805c = 0x60e7e000; memory 0x8060 = 0x63bde000; memory 0x8064 = 0x63def800; memory 0x8068 = 0x6bbe0000; memory 0x806c = 0xd00003e8; memory 0x8070 = 0x60a5e000; memory 0x8074 = 0xd00003cc; memory 0x8078 = 0x59400000; memory 0x807c = 0x1; memory 0x8080 = 0x88000000; \"\n}",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_current",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## state_history",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "state_history",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## record",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "[]",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "record",
        "type": "object",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## tag",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "4/12/2022, 18:18:41",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "tag",
        "type": "string",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    },
    {
      "cell_type": "markdown",
      "source": "## notify",
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": "true",
      "outputs": [],
      "execution_count": 1,
      "metadata": {
        "name": "notify",
        "type": "boolean",
        "collapsed": false,
        "deletable": false,
        "editable": false
      }
    }
  ]
}